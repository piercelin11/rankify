generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  username      String?          @unique
  email         String?          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role             @default(USER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  rankings      Ranking[]
  dates         RankingSession[]
  loggedArtists Artist[]         @relation("ArtistToUser")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Artist {
  id               String           @id
  name             String
  spotifyUrl       String           @unique
  img              String?
  spotifyFollowers Int
  userId           String?
  albums           Album[]
  Ranking          Ranking[]
  dates            RankingSession[]
  tracks           Track[]
  rankedBy         User[]           @relation("ArtistToUser")
}

model Album {
  id          String    @id
  name        String
  artistId    String
  spotifyUrl  String    @unique
  color       String?
  img         String?
  releaseDate DateTime
  type        AlbumType
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  rankings    Ranking[]
  tracks      Track[]

  @@unique([name, artistId])
}

model Track {
  id          String    @id
  name        String
  albumId     String?
  trackNumber Int?
  spotifyUrl  String    @unique
  img         String?
  artistId    String
  releaseDate DateTime?
  discNumber  Int?
  rankings    Ranking[]
  album       Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([albumId, name])
  @@unique([artistId, name])
}

model Ranking {
  id         String         @id @default(uuid())
  ranking    Int
  dateId     String
  trackId    String
  albumId    String?
  artistId   String
  userId     String
  rankChange Int?
  album      Album?         @relation(fields: [albumId], references: [id], onDelete: Restrict)
  Artist     Artist         @relation(fields: [artistId], references: [id])
  date       RankingSession @relation(fields: [dateId], references: [id], onUpdate: Restrict)
  track      Track          @relation(fields: [trackId], references: [id])
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RankingSession {
  id       String       @id @default(uuid())
  date     DateTime     @default(now())
  userId   String
  artistId String?
  type     RankingType?
  rankings Ranking[]
  artist   Artist?      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date])
}

enum Role {
  USER
  ADMIN
}

enum AlbumType {
  ALBUM
  EP
}

enum RankingType {
  ALBUM
  ARTIST
}
