generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  dates         dates[]
  rankings      rankings[]
  accounts      accounts[]
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
}

model accounts {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model genres {
  id      String    @id @default(uuid())
  name    String
  artists artists[]
  albums  albums[]
  songs   songs[]
}

model artists {
  id          String     @id
  name        String     @unique
  spotify_url String
  img         String
  genres      genres[]
  albums      albums[]
  songs       songs[]
  rankings    rankings[]
}

model albums {
  id           String     @id
  name         String
  artist_id    String
  spotify_url  String
  img          String
  release_date DateTime
  total_tracks Int
  genres       genres[]
  songs        songs[]
  artists      artists    @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankings     rankings[]

  @@unique([name, artist_id])
}

model songs {
  id           String     @id
  name         String
  album_id     String?
  track_number Int?
  genres       genres[]
  rankings     rankings[]
  albums       albums?    @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artists      artists    @relation(fields: [artist_id], references: [id])
  artist_id    String
  release_date DateTime?

  @@unique([album_id, name])
}

model rankings {
  id        String  @id @default(uuid())
  date_id   String
  song_id   String
  album_id  String?
  artist_id String
  ranking   Int
  dates     dates   @relation(fields: [date_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  songs     songs   @relation(fields: [song_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  albums    albums? @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id   String
}

model dates {
  id       String     @id @default(uuid())
  date     DateTime   @default(now())
  user_id  String
  users    users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankings rankings[]

  @@index([date])
}
