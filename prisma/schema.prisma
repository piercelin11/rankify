generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id              String              @id @default(cuid())
  name            String
  username        String?             @unique
  email           String?             @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            Role                @default(USER)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  accounts        Account[]
  albumRankings   AlbumRanking[]
  submissions     RankingSubmission[]
  userPreferences UserPreference[]
}

model UserPreference {
  id              String @id @default(cuid())
  rankingSettings Json
  userId          String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Artist {
  id               String              @id
  name             String
  spotifyUrl       String              @unique
  img              String?
  spotifyFollowers Int
  userId           String?
  albums           Album[]
  albumRankings    AlbumRanking[]
  submissions      RankingSubmission[]
  tracks           Track[]
}

model Album {
  id            String              @id
  name          String
  artistId      String
  spotifyUrl    String              @unique
  color         String?
  img           String?
  releaseDate   DateTime
  type          AlbumType
  artist        Artist              @relation(fields: [artistId], references: [id], onDelete: Cascade)
  albumRankings AlbumRanking[]
  submissions   RankingSubmission[]
  tracks        Track[]

  @@unique([name, artistId])
  @@index([artistId])
}

model Track {
  id          String         @id
  name        String
  albumId     String?
  trackNumber Int?
  spotifyUrl  String         @unique
  img         String?
  artistId    String
  releaseDate DateTime?
  discNumber  Int?
  type        TrackType      @default(STANDARD)
  color       String?
  album       Album?         @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist      Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  trackRanks  TrackRanking[]

  @@unique([albumId, name])
  @@unique([artistId, name])
  @@index([albumId])
  @@index([artistId])
}

model AlbumRanking {
  id                  String            @id @default(uuid())
  ranking             Int
  points              Int
  albumId             String
  artistId            String
  userId              String
  averageTrackRanking Float
  basePoints          Int
  submissionId        String
  album               Album             @relation(fields: [albumId], references: [id])
  artist              Artist            @relation(fields: [artistId], references: [id])
  submission          RankingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, submissionId, albumId])
}

model RankingSubmission {
  id          String           @id @default(cuid())
  status      SubmissionStatus
  type        SubmissionType
  draftState  Json?
  resultState Json?
  userId      String
  artistId    String
  albumId     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  completedAt DateTime?
  albumRanks  AlbumRanking[]
  album       Album?           @relation(fields: [albumId], references: [id], onDelete: Restrict)
  artist      Artist           @relation(fields: [artistId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackRanks  TrackRanking[]

  @@unique([userId, artistId, type, albumId])
}

model TrackRanking {
  id             String            @id @default(cuid())
  rank           Int
  rankPercentile Float
  score          Float?
  rankChange     Int?
  submissionId   String
  trackId        String
  userId         String
  artistId       String
  submission     RankingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  track          Track             @relation(fields: [trackId], references: [id])

  @@unique([submissionId, trackId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum AlbumType {
  ALBUM
  EP
}

enum TrackType {
  STANDARD
  REISSUE
}

enum SubmissionType {
  ALBUM
  ARTIST
}

enum SubmissionStatus {
  IN_PROGRESS
  DRAFT
  COMPLETED
}
