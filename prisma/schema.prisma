generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  username        String?          @unique
  email           String?          @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  userPreferences UserPreference[]
  albumRankings   AlbumRanking[]
  submissions     RankingSubmission[]
}

model UserPreference {
  id              String @id @default(cuid())
  rankingSettings Json
  user            User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          String
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Artist {
  id               String           @id
  name             String
  spotifyUrl       String           @unique
  img              String?
  spotifyFollowers Int
  userId           String?
  albums           Album[]
  tracks           Track[]
  albumRankings    AlbumRanking[]
  submissions      RankingSubmission[]
}

model Album {
  id            String         @id
  name          String
  artistId      String
  spotifyUrl    String         @unique
  color         String?
  img           String?
  releaseDate   DateTime
  type          AlbumType
  artist        Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tracks        Track[]
  albumRankings AlbumRanking[]
  submissions   RankingSubmission[]

  @@unique([name, artistId])
  @@index([artistId])
}

model Track {
  id          String    @id
  name        String
  albumId     String?
  trackNumber Int?
  spotifyUrl  String    @unique
  color       String?
  img         String?
  artistId    String
  releaseDate DateTime?
  discNumber  Int?
  type        TrackType @default(STANDARD)
  album       Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  trackRanks  TrackRanking[]

  @@unique([albumId, name])
  @@unique([artistId, name])
  @@index([albumId])
  @@index([artistId])
}


model AlbumRanking {
  id                  String         @id @default(uuid())
  ranking             Int
  points              Int
  basePoints          Int
  averageTrackRanking Float
  albumId             String
  artistId            String
  userId              String
  album               Album          @relation(fields: [albumId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  artist              Artist         @relation(fields: [artistId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  user                User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  submissionId        String
  submission          RankingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([userId, submissionId, albumId])
}



enum Role {
  USER
  ADMIN
}

enum AlbumType {
  ALBUM
  EP
}

enum TrackType {
  STANDARD
  REISSUE
}

enum SubmissionType {
  ALBUM
  ARTIST
}

enum SubmissionStatus {
  IN_PROGRESS
  DRAFT
  COMPLETED
}

model RankingSubmission {
  id           String           @id @default(cuid())
  status       SubmissionStatus // 使用 Enum 來確保狀態的有效性
  type         SubmissionType   // 使用 Enum 來確保類型的有效性
  rankingState Json?            // 新名字：儲存整個排名遊戲的狀態物件

  userId       String
  artistId     String
  albumId      String?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist       Artist   @relation(fields: [artistId], references: [id], onDelete: Restrict)
  album        Album?   @relation(fields: [albumId], references: [id], onDelete: Restrict)

  trackRanks   TrackRanking[]
  albumRanks   AlbumRanking[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?

  @@unique([userId, artistId, type, albumId])
}

model TrackRanking {
  id             String   @id @default(cuid())
  rank           Int
  rankPercentile Float
  score          Float?
  rankChange     Int?

  submissionId   String
  submission     RankingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  trackId        String
  track          Track    @relation(fields: [trackId], references: [id], onDelete: Restrict)

  userId         String
  artistId       String

  @@unique([submissionId, trackId])
  @@index([userId])
}

