generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  username        String?          @unique
  email           String?          @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  rankings        Ranking[]
  rankingSessions RankingSession[]
  rankingDrafts   RankingDraft[]
  userPreferences UserPreference[]
  albumRankings   AlbumRanking[]
}

model UserPreference {
  id              String @id @default(cuid())
  rankingSettings Json
  user            User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          String
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Artist {
  id               String           @id
  name             String
  spotifyUrl       String           @unique
  img              String?
  spotifyFollowers Int
  userId           String?
  albums           Album[]
  rankings         Ranking[]
  rankingSessions  RankingSession[]
  tracks           Track[]
  rankingDrafts    RankingDraft[]
  albumRankings    AlbumRanking[]
}

model Album {
  id            String         @id
  name          String
  artistId      String
  spotifyUrl    String         @unique
  color         String?
  img           String?
  releaseDate   DateTime
  type          AlbumType
  artist        Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  rankings      Ranking[]
  tracks        Track[]
  albumRankings AlbumRanking[]

  @@unique([name, artistId])
  @@index([artistId])
}

model Track {
  id          String    @id
  name        String
  albumId     String?
  trackNumber Int?
  spotifyUrl  String    @unique
  color       String?
  img         String?
  artistId    String
  releaseDate DateTime?
  discNumber  Int?
  type        TrackType @default(STANDARD)
  rankings    Ranking[]
  album       Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([albumId, name])
  @@unique([artistId, name])
  @@index([albumId])
  @@index([artistId])
}

model Ranking {
  id             String         @id @default(uuid())
  ranking        Int
  rankPercentile Float
  dateId         String
  trackId        String
  albumId        String?
  artistId       String
  userId         String
  rankChange     Int?
  album          Album?         @relation(fields: [albumId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  artist         Artist         @relation(fields: [artistId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  rankingSession RankingSession @relation(fields: [dateId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  track          Track          @relation(fields: [trackId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  user           User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, dateId, trackId])
  @@index([ranking])
  @@index([rankChange])
  @@index([dateId])
}

model AlbumRanking {
  id                  String         @id @default(uuid())
  ranking             Int
  points              Int
  basePoints          Int
  averageTrackRanking Float
  dateId              String
  albumId             String
  artistId            String
  userId              String
  album               Album          @relation(fields: [albumId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  artist              Artist         @relation(fields: [artistId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  date                RankingSession @relation(fields: [dateId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  user                User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, dateId, albumId])
}

model RankingSession {
  id            String         @id @default(uuid())
  date          DateTime       @default(now())
  userId        String
  artistId      String
  type          RankingType?
  rankings      Ranking[]
  artist        Artist         @relation(fields: [artistId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  user          User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  albumRankings AlbumRanking[]

  @@index([date])
}

model RankingDraft {
  id       String       @id @default(uuid())
  date     DateTime     @default(now())
  userId   String
  artistId String
  draft    String?
  result   Json?
  type     RankingType?
  artist   Artist?      @relation(fields: [artistId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  user     User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, artistId])
  @@index([date])
}

enum Role {
  USER
  ADMIN
}

enum AlbumType {
  ALBUM
  EP
}

enum TrackType {
  STANDARD
  REISSUE
}

enum RankingType {
  ALBUM
  ARTIST
}
