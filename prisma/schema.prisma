generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  username      String?          @unique
  email         String?          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  dates         RankingSession[]
  rankings      Ranking[]
  accounts      Account[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Genre {
  id            String          @id @default(uuid())
  name          String
  artists       Artist[]
  artistTogenre ArtistToGenre[]
}

model Artist {
  id            String           @id
  name          String
  spotifyUrl    String           @unique
  img           String
  genres        Genre[]
  albums        Album[]
  songs         Song[]
  rankings      Ranking[]
  dates         RankingSession[]
  artistTogenre ArtistToGenre[]
}

model ArtistToGenre {
  genreId  String
  genre    Genre  @relation(fields: [genreId], references: [id])
  artistId String
  artist   Artist @relation(fields: [artistId], references: [id])

  @@id([genreId, artistId])
}

model Album {
  id          String    @id
  name        String
  artistId    String
  spotifyUrl  String    @unique
  img         String
  releaseDate DateTime
  songs       Song[]
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankings    Ranking[]

  @@unique([name, artistId])
}

model Song {
  id           String    @id
  name         String
  albumId      String?
  trackNumber  Int
  spotifyUrl   String    @unique
  rankings     Ranking[]
  album        Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artist       Artist    @relation(fields: [artistId], references: [id])
  artistId     String
  release_date DateTime?

  @@unique([albumId, name])
}

model Ranking {
  id       String         @id @default(uuid())
  ranking  Int
  dateId   String
  songId   String
  albumId  String?
  artistid String
  userId   String
  date     RankingSession @relation(fields: [dateId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  song     Song           @relation(fields: [songId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  album    Album?         @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artist   Artist         @relation(fields: [artistid], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RankingSession {
  id       String    @id @default(uuid())
  date     DateTime  @default(now())
  userId   String
  artistId String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artist   Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankings Ranking[]

  @@index([date])
}
